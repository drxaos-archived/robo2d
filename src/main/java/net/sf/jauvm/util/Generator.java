/**
 * Copyright (c) 2005 Nuno Cruces
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holders nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

package net.sf.jauvm.util;

import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sf.jauvm.Continuation;
import net.sf.jauvm.interpretable;

/**
 * The abstract base class for generators.
 * <p/>
 * This class serves as the base class for generators, providing them the {@code generate(Object... args)} and {@code
 * yield(T value)} methods. Sub-classes must implement the {@code run(Object... args)} method.
 * <p/>
 * Note: the same {@code Generator} object is not to be used to iterate on more than one iterator simultaneously. For
 * that purpose, you should create two (or more) {@code Generator} objects of the same class.
 * @see Iterable
 * @see Iterator
 */
public abstract class Generator<T> {
    private Continuation yield;
    private Continuation cont;

    /**
     * Generates the next value for the present iterator.
     * <p/>
     * This method is called by the {@code Iterator} objects associated with the {@code Iterable} object returned by the
     * {@code generate(Object... args)} method to produce each next value for the iterator.
     * <p/>
     * Values are successively passed from this method to those iterators by calling the {@code yield} method and
     * proceding with determining the next value to pass. When no more values can be produced, this method should
     * return.
     * <p/>
     * The arguments passed to this method are the arguments given to the {@code generate(Object... args)} method that
     * returned the {@code Iterable} object whose iterators are invoking this method.
     * @param args the {@code args} passed to the {@code generate(Object... args)} method
     * @see #generate(Object...)
     * @see #yield(Object)
     */
    protected abstract void run(Object... args);

    /**
     * Hands down the next value to be yielded by the present iterator.
     * <p/>
     * This method should be called by the {@code run(Object... args)} method to pass the next value to be yielded to
     * the iterator.
     * @param value the next value to pass to the iterator
     * @throws UnsupportedOperationException if yield is invoked outside the context of an iterator.
     */
    protected final @interpretable void yield(T value) {
        if (yield == null) throw new UnsupportedOperationException("yield should be in the context of an iterator");
        cont = new Continuation();
        yield.returnTo(value);
    }

    /**
     * Creates an {@code Iterable} object that will have the values for its iterators generated by this {@code
     * Generator} object.
     * The arguments to this method will be passed to the {@code run(Object... args)} method, which will successively
     * generate each value for the returned {@code Iterable} object's iterators.
     * @param args the arguments to be handed down to the {@code run(Object... args)} method
     * @return the new {@code Iterable} object
     */
    public final Iterable<T> generate(final Object... args) {
        return new Iterable<T>() {
            public Iterator<T> iterator() {
                return new Iterator<T>() {
                    private boolean hasNext = true;
                    private boolean isNext;
                    private T next;

                    public @interpretable T next() {
                        if (!hasNext()) throw new NoSuchElementException();
                        isNext = false;
                        return next;
                    }

                    public @interpretable boolean hasNext() {
                        if (isNext) return hasNext;
                        next = helper();
                        isNext = true;
                        return hasNext;
                    }

                    private @interpretable T helper() {
                        yield = new Continuation();

                        if (cont == null) {
                            run(args);
                            hasNext = false;
                            yield = cont = null;
                            return null;
                        } else cont.returnTo();

                        throw null;
                    }

                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
    }
}
